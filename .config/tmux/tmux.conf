#!/usr/bin/env tmux

# -----------------------------------------------------------------------------
# Global options
# -----------------------------------------------------------------------------

# set the default TERM
if-shell 'infocmp $TERM' { set default-terminal "$TERM" } { set default-terminal tmux-256color }

# Enable RGB (truecolor)
set -a terminal-features '*:RGB'

# Enable colored underlines (e.g. in Vim)
set -a terminal-features '*:usstyle'

# fix the cursor shape https://github.com/neovim/neovim/issues/5096#issuecomment-469027417
set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'
# undercurl support
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
# underscore colours - needs tmux-3.0
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# Use extended keys (CSI u)
set -g extended-keys on

# using nvim in tmux delays esc key and send alt
# this helps prevent sending alt+j/k
set -sg escape-time 1


# Ensure window index numbers get reordered on delete.
set -g renumber-windows on

# Start windows and panes index at 1, not 0.
set -g base-index 1
setw -g pane-base-index 1

# Enable full mouse support
set -g mouse on

set -g status-position top

# Add a bit more scroll history in the buffer.
set -g history-limit 50000

# enable clipboard copy in wayland
set -s copy-command 'wl-copy'

# Enable focus events
set -g focus-events on

# Allow tmux to set the title of the terminal emulator
set -g set-titles on
set -g set-titles-string "#S"

# Allow multiple commands to be entered without pressing the prefix-key again
set -g repeat-time 650

# -----------------------------------------------------------------------------
# Key bindings
# -----------------------------------------------------------------------------



# Set a new prefix / leader key.
set -g prefix C-Space
bind C-Space send-prefix

# Unbind default keys
# unbind C-b
unbind '"'
unbind %
# this seems to fix the lag/issue with the control flow
unbind -n C-s
# don't suspend-client
unbind C-z


# Reload the tmux config.
bind R run-shell 'tmux source-file ${HOME}/.config/tmux/tmux.conf && tmux display-message "config reloaded"'

# Split panes.
bind c new-window -c '#{pane_current_path}'

# bind -n S-down new-window
bind b split-window -v -c '#{pane_current_path}'
bind v split-window -h -c '#{pane_current_path}'


bind -r "<" swap-window -d -t -1
bind -r ">" swap-window -d -t +1

# last window
unbind l # normally used for last-window
bind C-a last-window

# Make switching between windows easier
bind C-p previous-window
bind C-n next-window

bind -n M-c kill-pane

# extra shells
unbind t

# -----------------------------------------------------------------------------
# vim
# -----------------------------------------------------------------------------


# Use vi keys in copy mode
set -gw mode-keys vi

# NOTE: checking `#{pane_current_command}` does not work when neovim is invoked from another program, e.g. `lf`.
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind -n 'C-h' if-shell "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
bind -n 'C-j' if-shell "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind -n 'C-k' if-shell "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind -n 'C-l' if-shell "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }

bind -T copy-mode-vi 'C-h' if -F '#{pane_at_left}' '' 'select-pane -L'
bind -T copy-mode-vi 'C-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind -T copy-mode-vi 'C-k' if -F '#{pane_at_top}' '' 'select-pane -U'
bind -T copy-mode-vi 'C-l' if -F '#{pane_at_right}' '' 'select-pane -R'

bind -n 'M-h' if-shell "$is_vim" 'send-keys M-h' 'resize-pane -L 1'
bind -n 'M-j' if-shell "$is_vim" 'send-keys M-j' 'resize-pane -D 1'
bind -n 'M-k' if-shell "$is_vim" 'send-keys M-k' 'resize-pane -U 1'
bind -n 'M-l' if-shell "$is_vim" 'send-keys M-l' 'resize-pane -R 1'

bind -T copy-mode-vi M-h resize-pane -L 1
bind -T copy-mode-vi M-j resize-pane -D 1
bind -T copy-mode-vi M-k resize-pane -U 1
bind -T copy-mode-vi M-l resize-pane -R 1

# Make vi copy mode more vim-like
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi V send-keys -X select-line
# bind -T copy-mode-vi y send-keys -X copy-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'wl-copy'
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle

bind Escape copy-mode
# bind p paste-buffer
# bind P choose-buffer
# bind + delete-buffer \; display-message "Deleted current Tmux clipboard history"


# bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel 'wl-copy'

# bind enter to yank
# unbind -T copy-mode-vi Enter
# bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'wl-copy'


# -----------------------------------------------------------------------------
# Plugins and styles
# -----------------------------------------------------------------------------

# set folder
set-environment -g TMUX_PLUGIN_MANAGER_PATH "${HOME}/.config/tmux/plugins"

set -g @plugin 'tmux-plugins/tpm'

set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'

if-shell "command -v xdg-open 2>/dev/null" { set -g @plugin 'tmux-plugins/tmux-open' }

# buffer yank extraction
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'laktak/extrakto'
set -g @plugin 'fcsonline/tmux-thumbs'

# theme
set -g @plugin 'egel/tmux-gruvbox'
set -g @tmux-gruvbox 'dark'

# plugins config
set -g @resurrect-dir "${HOME}/.cache/tmux/resurrect"
set -g @resurrect-strategy-nvim 'session'
set -g @resurrect-save 'S'
set -g @resurrect-restore 'M-r'

set -g @continuum-restore 'off'

set -g @yank_selection_mouse 'clipboard'

set -g @thumbs-key F


set -g @extrakto_key tab
set -g @extrakto_popup_size 60%
set -g @extrakto_split_size "15"
set -g @extrakto_clip_tool "xsel -p -i" # works better for nvim
set -g @extrakto_copy_key "y"      # use tab to copy to clipboard
set -g @extrakto_insert_key "enter"  # use enter to insert selection

